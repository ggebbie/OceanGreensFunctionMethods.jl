var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = OceanGreensFunctionMethods","category":"page"},{"location":"#OceanGreensFunctionMethods","page":"Home","title":"OceanGreensFunctionMethods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OceanGreensFunctionMethods.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [OceanGreensFunctionMethods]","category":"page"},{"location":"#OceanGreensFunctionMethods.TracerInverseGaussian","page":"Home","title":"OceanGreensFunctionMethods.TracerInverseGaussian","text":"TracerInverseGaussian(Œì,Œî)\n\nusing LinearAlgebra: NumberArray\n\nThe tracer inverse Gaussian distribution with mean Œì and width Œî has probability density function\n\nG(ùê± tau) = sqrtfracGamma^3 4 pi Delta^2 tau^3  exp left( - fracGamma (tau - Gamma)^24 Delta ^2 tauright) \n\nTracerInverseGaussian()              # Tracer Inverse Gaussian distribution with unit mean and unit width, i.e. TracerInverseGaussian(1, 1)\nTracerInverseGaussian(Œì, Œî)          # Tracer Inverse Gaussian distribution with mean Œì and width Œî\n\nparams(d)           # Get the parameters, i.e. (Œì, Œî)\nmean(d)             # Get the mean parameter, i.e. Œì\nshape(d)            # Get the shape parameter, i.e. Œî\n\nExternal links\n\nCompare to Inverse Gaussian distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"#OceanGreensFunctionMethods.linear_probe-Union{Tuple{T}, Tuple{N}, Tuple{Function, DimensionalData.DimArray{T, N, D, R, A} where {D<:Tuple, R<:Tuple, A<:AbstractArray{T, N}}, Vararg{Any}}} where {N, T<:Number}","page":"Home","title":"OceanGreensFunctionMethods.linear_probe","text":"function linear_probe(x‚ÇÄ,M)\n\nProbe a function to determine its linear response in matrix form.\nAssumes units are needed and available.\nA simpler function to handle cases without units would be nice.\n\nfunk:: function to be probed\nx:: input variable\nargs:: the arguments that follow x in `funk`\n\n\n\n\n\n","category":"method"}]
}
