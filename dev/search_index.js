var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = OceanGreensFunctionMethods","category":"page"},{"location":"#OceanGreensFunctionMethods","page":"Home","title":"OceanGreensFunctionMethods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for OceanGreensFunctionMethods.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [OceanGreensFunctionMethods]","category":"page"},{"location":"#OceanGreensFunctionMethods.TracerInverseGaussian","page":"Home","title":"OceanGreensFunctionMethods.TracerInverseGaussian","text":"TracerInverseGaussian(Œì,Œî)\n\nusing LinearAlgebra: NumberArray\n\nThe tracer inverse Gaussian distribution with mean Œì and width Œî has probability density function\n\nG(ùê± tau) = sqrtfracGamma^3 4 pi Delta^2 tau^3  exp left( - fracGamma (tau - Gamma)^24 Delta ^2 tauright) \n\nTracerInverseGaussian()              # Tracer Inverse Gaussian distribution with unit mean and unit width, i.e. TracerInverseGaussian(1, 1)\nTracerInverseGaussian(Œì, Œî)          # Tracer Inverse Gaussian distribution with mean Œì and width Œî\n\nparams(d)           # Get the parameters, i.e. (Œì, Œî)\nmean(d)             # Get the mean parameter, i.e. Œì\nshape(d)            # Get the shape parameter, i.e. Œî\n\nExternal links\n\nCompare to Inverse Gaussian distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"#OceanGreensFunctionMethods.abyssal_overturning-Tuple{Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.abyssal_overturning","text":"abyssal_overturning(Œ®,model_dims)\n\nSet volume flux, Œ®, in an abyssal overturning loop that satisfies the conservation of volume. Return a structure of Fluxes.\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.advective_diffusive_flux-Tuple{AlgebraicArrays.VectorArray{T, N, A} where {T, N, A<:DimensionalData.AbstractDimArray}, AlgebraicArrays.VectorArray{T, N, A} where {T, N, A<:DimensionalData.AbstractDimArray}}","page":"Home","title":"OceanGreensFunctionMethods.advective_diffusive_flux","text":"advective_diffusive_flux(C, Fv; œÅ)\n\nAdvective-diffusive flux of tracer C given volume fluxes Fv and optional density œÅ.\n\nArguments\n\nC::VectorDimArray: tracer distribution\nFv::VectorDimArray: volume fluxes\nœÅ::Number=1035kg/m^3: uniform density\n\nReturns\n\nFc::VectorDimArray: tracer flux\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.advective_diffusive_flux-Tuple{AlgebraicArrays.VectorArray{T, N, A} where {T, N, A<:DimensionalData.AbstractDimArray}, Fluxes}","page":"Home","title":"OceanGreensFunctionMethods.advective_diffusive_flux","text":"advective_diffusive_flux(C, Fv; œÅ)\n\nAdvective-diffusive flux of tracer C given volume fluxes Fv and optional density œÅ.\n\nArguments\n\nC::VectorDimArray: tracer distribution\nFv::Fluxes: volume fluxes\nœÅ::Number=1035kg/m^3: uniform density\n\nReturns\n\nFc::Fluxes: tracer flux\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.boundary_dimensions-Tuple{}","page":"Home","title":"OceanGreensFunctionMethods.boundary_dimensions","text":"boundary_dimensions()\n\nDefine labels for the boundary's physical dimensions, as well as labels for the box names, consistently with the model dimensions. Use the format of DimensionalData.jl. Permits numerical quantities to be bundled with their meta-data. Dimensions are Unordered to avoid issues related to the alphabetical order.\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.boundary_flux-Tuple{AlgebraicArrays.VectorArray{T, N, A} where {T, N, A<:DimensionalData.AbstractDimArray}, AlgebraicArrays.VectorArray{T, N, A} where {T, N, A<:DimensionalData.AbstractDimArray}, AlgebraicArrays.VectorArray{T, N, A} where {T, N, A<:DimensionalData.AbstractDimArray}}","page":"Home","title":"OceanGreensFunctionMethods.boundary_flux","text":"boundary_flux(f::VectorDimArray, C::VectorDimArray, Fb::VectorDimArray)\n\nConvergence or net effect of boundary fluxes.\n\nArguments\n\nf::VectorDimArray: Dirichlet boundary condition\nC::VectorDimArray: tracer distribution \nFb::VectorDimArray: boundary exchange volume flux\n\nReturns\n\nJb::Fluxes: boundary tracer flux\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.boundary_propagator-Tuple{Any, AbstractMatrix, AbstractMatrix}","page":"Home","title":"OceanGreensFunctionMethods.boundary_propagator","text":"boundary_propagator(œÑ, A, B; alg=:forward)\n\nForward and adjoint boundary propagators.\n\nForward boundary propagator\n\nboundary_propagator(œÑ, A, B, alg=:forward)\n\nThe (forward) boundary propagator is the box model surface-to-interior transit time distribution (TTD) over transit times œÑ = t - t‚Ä≤, as given by equation 88 of Haine et al. (2024):\n\nbf G (tau) = bf G (tau)  bf B\n\nThe N √ó N‚Çõ ùêÜ‚Ä≤(œÑ) matrix quantifies transfer from the N‚Çõ components of the surface forcing to the N boxes with transit time œÑ.\n\nAdjoint boundary propagator\n\nboundary_propagator(œÑ, A, B, alg=:adjoint)\n\nThe box model adjoint boundary propagator (interior-to-surface TTD over transit time œÑ‚Ä† = t‚Ä≥ - t, where t‚Ä≥ ‚â• t is the time of the adjoint source; equation 93 of Haine et al., 2024) is\n\nbf G^dagger (tau^dagger )  = bf B^T bf G (tau^dagger)\n\nThis N‚Çõ √ó N ùêÜ‚Ä≤‚Ä†(œÑ‚Ä†) matrix quantifies transfer from the N interior boxes to the N‚Çõ surface boxes with transit time œÑ‚Ä†.\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.boundary_propagator_adjoint-Tuple{Any, AbstractMatrix, AbstractMatrix}","page":"Home","title":"OceanGreensFunctionMethods.boundary_propagator_adjoint","text":"boundary_propagator_adjoint(t,A,B)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.boundary_propagator_forward-Tuple{Any, AbstractMatrix, AbstractMatrix}","page":"Home","title":"OceanGreensFunctionMethods.boundary_propagator_forward","text":"boundary_propagator_forward(t,A,B)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.convergence-Union{Tuple{Fluxes{T, A}}, Tuple{A}, Tuple{T}} where {T, A<:(AlgebraicArrays.VectorArray{T, N, A} where {N, A<:DimensionalData.AbstractDimArray})}","page":"Home","title":"OceanGreensFunctionMethods.convergence","text":"convergence(J)\n\nConvergence of fluxes J of type Fluxes. This is a computational method that depends on proper slices and broadcasting and thus currently requires using parent on the left hand side below.\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.evolve_concentration-NTuple{5, Any}","page":"Home","title":"OceanGreensFunctionMethods.evolve_concentration","text":"evolve_concentration(C‚ÇÄ, A, B, tlist, source_history; halflife = nothing)\n\nIntegrate forcing vector over time to compute the concentration history. Find propagator by analytical expression using eigen-methods.\n\nArguments\n\nC‚ÇÄ: initial tracer concentration\nA: tracer transport information used in matrix calculations\nB: boundary condition information used in matrix calculations\ntlist: list of times to save tracer concentration\nsource_history::Function: returns Dirichlet boundary condition at a given time\nhalflife=nothing: radioactive half life (optional)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.forcing_integrand-NTuple{6, Any}","page":"Home","title":"OceanGreensFunctionMethods.forcing_integrand","text":"forcing_integrand(t, tf, Œº, V, B, source_history)\n\nIntegrand for boundary condition term in equation 10 (Haine et al., 2024).\n\nArguments\n\nt: time\ntf: final time \nŒº: eigenvalue diagonal matrix\nV: eigenvector matrix\nB: boundary condition matrix\nsource_history::Function: returns Dirichlet boundary condition at a given time\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.global_ttd-Tuple{Any, AbstractMatrix, AbstractMatrix}","page":"Home","title":"OceanGreensFunctionMethods.global_ttd","text":"global_ttd(t, A, B; alg=:forward)\n\nForward and adjoint global transit time distributions (TTDs).\n\nForward Global TTD\n\nThe forward global (total) TTD is the sum of surface-to-interior TTDs (equation 90 of Haine et al., 2024): \n\ncal G (t) = bf G (t)  bf B  bf 1_N_S\n\nwhere the product with the Ns √ó 1 column vector of ones (i.e., last matrix in previous equation) computes the sum over surface boxes. This expression yields an N √ó 1 column vector that is normalized for each box.\n\nAdjoint Global TTD\n\nThe adjoint global (total) TTD is the sum of interior-to-surface TTDs. \n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.global_ttd_adjoint-Tuple{Any, AbstractMatrix, AbstractMatrix}","page":"Home","title":"OceanGreensFunctionMethods.global_ttd_adjoint","text":"global_ttd_adjoint(t, A, B)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.global_ttd_forward-Tuple{Any, AbstractMatrix, AbstractMatrix}","page":"Home","title":"OceanGreensFunctionMethods.global_ttd_forward","text":"global_ttd_forward(t, A, B)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.greens_function-Tuple{Any, AbstractMatrix}","page":"Home","title":"OceanGreensFunctionMethods.greens_function","text":"greens_function(œÑ,A)\n\nGreen's function for a box model (for steady transport given by the matrix ùêÄ for response at time t to a source at time t‚Ä≤ where œÑ = t - t‚Ä≤): the matrix exponential function of the elapsed time between the source time and field time:\n\nbf G(tau) = e^ bf A tau\n\nwhere ùêÜ(t) is a  N √ó N matrix with the spatial locations of field points (boxes) down its N rows and source points (boxes) along its N columns. Thus, the element ùêÜ{i,j}(œÑ) quantifies transfer from a source at time t‚Ä≤ in box j to receiver at time t in box i.\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.ideal_age-Tuple{Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.ideal_age","text":"ideal_age(A, B; alg= :forward)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.ideal_age_adjoint-Tuple{Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.ideal_age_adjoint","text":"ideal_age_adjoint(A, B)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.ideal_age_forward-Tuple{Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.ideal_age_forward","text":"ideal_age_forward(A, B)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.integrate_forcing-NTuple{6, Any}","page":"Home","title":"OceanGreensFunctionMethods.integrate_forcing","text":"integrate_forcing(t0, tf, Œº, V, B, source_history)\n\nIntegrate boundary condition term in equation 10 (Haine et al., 2024).\n\nArguments\n\nt0: initial time\ntf: final time \nŒº: eigenvalue diagonal matrix\nV: eigenvector matrix\nB: boundary condition matrix\nsource_history::Function: returns Dirichlet boundary condition at a given time\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.intermediate_overturning-Tuple{Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.intermediate_overturning","text":"intermediate_overturning(Œ®,model_dims)\n\nSet the volume flux, Œ®, in an intermediate overturning loop that satisfies the conservation of volume. Return a structure of Fluxes.\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.linear_probe-Union{Tuple{DA}, Tuple{N}, Tuple{T}, Tuple{Function, AlgebraicArrays.VectorArray{T, N, DA}, Vararg{Any}}} where {T, N, DA<:DimensionalData.AbstractDimArray}","page":"Home","title":"OceanGreensFunctionMethods.linear_probe","text":"linear_probe(funk, x, args...)\n\nProbe a function to determine its linear response in matrix form. Assumes units are needed and available. A simpler function to handle cases without units would be nice.\n\nArguments\n\nfunk: function to be probed\nx: input (independent) variable\nhalflife::Number: radioactive half life\nargs: the arguments that follow x in funk\n\nReturns\n\nA::MatrixDimArray: labeled transport information used in matrix operations \n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.location_iodine129_history-Tuple{}","page":"Home","title":"OceanGreensFunctionMethods.location_iodine129_history","text":"location_transient_tracer_histories()\n\nURL of iodine-129 source history file.\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.location_transient_tracer_histories-Tuple{}","page":"Home","title":"OceanGreensFunctionMethods.location_transient_tracer_histories","text":"location_transient_tracer_histories()\n\nURL of tracer source history file.\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.mass-Tuple{Any}","page":"Home","title":"OceanGreensFunctionMethods.mass","text":"mass(V; œÅ)\n\nSeawater mass derived from the volume V and an optional input of density œÅ.\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.mass_convergence-Tuple{Any}","page":"Home","title":"OceanGreensFunctionMethods.mass_convergence","text":"mass_convergence(Fv)\n\nConvergence of volume derived from a field of volume fluxes Fv, translated into a mass flux convergence with the assumption of uniform density.  \n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.maximum_timescale-Tuple{Any}","page":"Home","title":"OceanGreensFunctionMethods.maximum_timescale","text":"maximum_timescale(Œº)\n\nReturn Tmax for the eigenvalues Œº. The matrix exponential of ùêÄœÑ has asymptotic properties because G(t) must eventually decay exponentially with timescale \n\nT_max = -1mu_min        \n\nwhere Œºmin is the eigenvalue with smallest real part. Thus, the Green's function has a maximum timescale of Tmax which is larger than all other transport timescales.\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.mean_age-Tuple{Any, Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.mean_age","text":"mean_age(Œº, V, B; alg=:forward)\n\nMean age of the forward TTDs, adjoint TTDs, and residence-time distributions.\n\nArguments\n\nŒº: eigenvalues vector\nV: eigenvector matrix\nB: boundary matrix\nalg=:forward: algorithm (optional)\n\nForward mean age\n\nmean_age(Œº, V, B, alg=:forward)\n\nThe mean transit time ùö™ (mean age) is (equation 92 of Haine et al., 2004),\n\nbf Gamma = bf V  mu^-2  bf V^-1  bf B  bf 1_N_S\n\nwhich is an N √ó 1 vector for each box (and which also equals the ideal age).\n\nAdjoint mean age\n\nmean_age(Œº, V, B, alg=:adjoint)\n\nResidence-time mean age\n\nmean_age(Œº, V, B, alg=:residence)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.mean_age_adjoint-Tuple{Any, Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.mean_age_adjoint","text":"mean_age_adjoint(Œº, V, B)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.mean_age_forward-Tuple{Any, Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.mean_age_forward","text":"mean_age_forward(Œº, V, B)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.mean_age_residence-Tuple{Any, Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.mean_age_residence","text":"mean_age_residence(Œº, V, B)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.model_dimensions-Tuple{}","page":"Home","title":"OceanGreensFunctionMethods.model_dimensions","text":"model_dimensions()\n\nDefine labels for the model's physical dimensions, as well as labels for the box names. Use the format of DimensionalData.jl. Permits numerical quantities to be bundled with their meta-data. Dimensions are Unordered to avoid issues related to the alphabetical order.\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.normalized_exponential_decay-Tuple{Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.normalized_exponential_decay","text":"normalized_exponential_decay(t,Tmax)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.path_density-NTuple{6, Any}","page":"Home","title":"OceanGreensFunctionMethods.path_density","text":"path_density(Œº, V, B, t, mbox, vbox)\n\nArguments\n\nŒº: eigenvalue diagonal matrix\nV: eigenvector matrix\nB: boundary matrix\nt: time\nmbox: name of meridional box of interest\nvbox: name of vertical box of interest\n\nReturns\n\nE: path density\n\nThe path density ùêÑ_i(œÑ) for i ‚àà 1 ... N is (equation 96 of Haine et al., 2024):\n\nbf E_i (tau)  = \nfrac1N int_t - tau^t bf G^dagger (t^* + tau - t)  bf D_i   bf G (t - t^*)  d t ^*  \n\nwhere ùêÉi is the N √ó N matrix unit of zeros with a single one at the i-th row and i-th column. Therefore, \n\nbf E_i (tau)  = frac1N int_0^tau bf G^dagger (t)  bf D_i   bf G (tau - t)  d t \n\nand\n\nbf E_i (tau) = frac1N bf B^T int_0^tau  e^bf A t  bf D_i  e^bf A (\tau - t)  d t  bf B\n\nand\n\nbf E_i (tau) = frac1Nbf B^T  bf V left( overlinebf D_i circ Phi (t) right) bf V^-1  bf B\n\nwhere œï is defined in equation (100) of Haine et al. (2024). For a particular interior box i, ùêÑ_i(œÑ) is the density of pathways between all combinations of surface entry and surface exit boxes over total residence time œÑ.\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.phi_function-Tuple{Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.phi_function","text":"phi_function(t, Œº)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.radioactive_decay-Tuple{AlgebraicArrays.VectorArray, Number}","page":"Home","title":"OceanGreensFunctionMethods.radioactive_decay","text":"radioactive_decay(C, halflife)\n\nRadioactive decay rate of tracer C with half life of halflife.\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.read_iodine129_history-Tuple{}","page":"Home","title":"OceanGreensFunctionMethods.read_iodine129_history","text":"read_iodine129_history()\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.read_transient_tracer_histories-Tuple{}","page":"Home","title":"OceanGreensFunctionMethods.read_transient_tracer_histories","text":"read_transient_tracer_histories()\n\nRead transient tracer source histories and save as a DimArray. \n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.residence_time-Tuple{Any, AbstractMatrix, AbstractMatrix}","page":"Home","title":"OceanGreensFunctionMethods.residence_time","text":"residence_time(t, A, B)\n\nThe surface-to-surface residence-time distribution (RTD) is (equations 94 and 95 of Haine et al., 2024):\n\nbf R (tau) = \nfrac1N int_t - tau^t bf G^dagger (t^* + tau - t)   bf G (t - t^*)  d t ^*\n\nor\n\nbf R (tau)  = fractauN bf B^T   bf G (tau)  bf B\n\nwhere N is the number of boxes, G(œÑ) is the forward Green's function and B is the boundary matrix.  The Ns √ó Ns R(œÑ) matrix quantifies transfer from the Ns surface boxes back to the Ns surface boxes with residence time œÑ (element R{i,j}(œÑ) quantifies transfer from entry box j to exit box i).\n\nNote: not normalized by number of boxes in this code: consistent with manuscript?\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.steady_tracer_timeseries-NTuple{7, Any}","page":"Home","title":"OceanGreensFunctionMethods.steady_tracer_timeseries","text":"steady_tracer_timeseries(tracername, A, B, halflife, tlist, mbox1, vbox1)\n\nSimulate non-transient tracers and return tracer timeseries from one box.\n\nArguments\n\ntracername: name of tracer\nA: tracer transport matrix\nB: boundary condition matrix\nhalflife: radioactive half life\nBD: Dirichlet boundary condition\ntlist: list of times to save tracer concentration\nmbox: name of meridional box of interest\nvbox: name of vertical box of interest\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.timestep_initial_condition-NTuple{5, Any}","page":"Home","title":"OceanGreensFunctionMethods.timestep_initial_condition","text":"timestep_initial_condition(C, Œº, V, ti, tf)\n\nArguments\n\nC::VectorDimArray: tracer distribution at ti\nŒº: eigenvalue diagonal matrix\nV: eigenvector matrix\nti: initial time\ntf: final time\n\nReturns\n\nCf::VectorDimArray: tracer distribution at tf\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.tracer_point_source_history-Tuple{Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.tracer_point_source_history","text":"tracer_point_source_history(tracername, BD)\n\nReturn a function that yields transient tracer source history (such as CFCs) at given time.\n\nArguments\n\ntracername: name of tracer in source history file\nBD::DimArray: Dirichlet boundary condition compendium for many tracers\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.tracer_source_history","page":"Home","title":"OceanGreensFunctionMethods.tracer_source_history","text":"tracer_source_history(t, tracername, box2_box1_ratio, BD = nothing)\n\nReturn source history values for all boundary points.\n\nArguments\n\nt: time\ntracername: name of tracer in source history file\nbox2_box1_ratio: ratio of boundary condition value in Mid-latitudes to High Latitudes\nBD::DimArray=nothing: Dirichlet boundary condition compendium (optional)\n\n\n\n\n\n","category":"function"},{"location":"#OceanGreensFunctionMethods.tracer_tendency-NTuple{4, AlgebraicArrays.VectorArray{T, N, A} where {T, N, A<:DimensionalData.AbstractDimArray}}","page":"Home","title":"OceanGreensFunctionMethods.tracer_tendency","text":"tracer_tendency(f, C, Fv, Fb, V)\n\nTracer tendency ‚àÇC/‚àÇt for a boundary flux f, for use with finding B boundary matrix.\n\nArguments\n\nf::VectorDimArray: Dirichlet boundary condition\nC::VectorDimArray: tracer distribution\nFv::Fluxes: volume fluxes\nFb::Fluxes: volume fluxes\nV::VectorDimArray: box volume\n\nReturns\n\ndCdt::VectorDimArray: tracer tendency\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.tracer_tendency-Tuple{AlgebraicArrays.VectorArray{T, N, A} where {T, N, A<:DimensionalData.AbstractDimArray}, Number}","page":"Home","title":"OceanGreensFunctionMethods.tracer_tendency","text":"tracer_tendency(C)\n\nTracer tendency ‚àÇC/‚àÇt for the radioactive decay of a tracer C with half life halflife, for use with finding the radioactive contribution to a tracer transport matrix.\n\nArguments\n\nC::VectorDimArray: tracer distribution\nhalflife::Number: radioactive half life\n\nReturns\n\ndCdt::VectorDimArray: tracer tendency\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.tracer_tendency-Union{Tuple{T}, Tuple{AlgebraicArrays.VectorArray{T, N, A} where {T, N, A<:DimensionalData.AbstractDimArray}, AlgebraicArrays.VectorArray{T, N, A} where {T, N, A<:DimensionalData.AbstractDimArray}, Fluxes{T, <:AlgebraicArrays.VectorArray{T, N, A} where {T, N, A<:DimensionalData.AbstractDimArray}}, AlgebraicArrays.VectorArray{T, N, A} where {T, N, A<:DimensionalData.AbstractDimArray}, AlgebraicArrays.VectorArray{T, N, A} where {T, N, A<:DimensionalData.AbstractDimArray}}} where T","page":"Home","title":"OceanGreensFunctionMethods.tracer_tendency","text":"tracer_tendency(C, f, Fv, Fb, V)\n\nTracer tendency ‚àÇC/‚àÇt for a tracer C, especially useful for finding a tracer transport matrix. \n\nArguments\n\nC::VectorDimArray: tracer distribution\nf::VectorDimArray: Dirichlet boundary condition\nFv::Fluxes: volume fluxes\nFb::VectorDimArray: boundary flux convergence\nV::VectorDimArray: box volume\n\nReturns\n\ndCdt::VectorDimArray: tracer tendency\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.tracer_timeseries-NTuple{6, Any}","page":"Home","title":"OceanGreensFunctionMethods.tracer_timeseries","text":"tracer_timeseries(tracername, A, B, tlist, mbox1, vbox1; BD=nothing, halflife=nothing)\n\nSimulate tracers and return tracer timeseries from one box.\n\nArguments\n\ntracername: name of tracer\nA: tracer transport matrix\nB: boundary condition matrix\ntlist: list of times to save tracer concentration\nmbox: name of meridional box of interest\nvbox: name of vertical box of interest\nBD=nothing: Dirichlet boundary condition\nhalflife=nothing: radioactive half life\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.transient_tracer_timeseries-NTuple{7, Any}","page":"Home","title":"OceanGreensFunctionMethods.transient_tracer_timeseries","text":"transient_tracer_timeseries(tracername, A, B, BD, tlist, mbox1, vbox1; halflife = nothing)\n\nSimulate transient tracers and return tracer timeseries from one box.\n\nArguments\n\ntracername: name of tracer\nA: tracer transport matrix\nB: boundary condition matrix\nBD: Dirichlet boundary condition\ntlist: list of times to save tracer concentration\nmbox: name of meridional box of interest\nvbox: name of vertical box of interest\nhalflife=nothing: radioactive half life\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.ttd_width-Tuple{Any, Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.ttd_width","text":"ttd_width(Œº, V, B; alg=:forward)\n\nWidth of the forward TTDs, adjoint TTDs, and residence-time distributions.\n\nArguments\n\nŒº: eigenvalue diagonal matrix\nV: eigenvector matrix\nB: boundary matrix\nalg=:forward: algorithm (optional)\n\nReturns\n\nŒî: TTD width\n\nWidth of forward TTD\n\nttd_width(Œº, V, B, alg=:forward)\n\nThe TTD width is given by (equation 92 of Haine et al., 2024),\n\n2 bf Delta^2  = -2  bf V  mu^-3  bf V^-1  bf B  bf 1_N_S  - bf Gamma^2\n\nwhich is a N √ó 1 vector for each box.\n\nAdjoint mean age\n\nmean_age(Œº, V, B, alg=:adjoint)\n\nResidence-time mean age\n\nmean_age(Œº, V, B, alg=:residence)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.ttd_width_adjoint-Tuple{Any, Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.ttd_width_adjoint","text":"ttd_width_adjoint(Œº, V, B)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.ttd_width_forward-Tuple{Any, Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.ttd_width_forward","text":"ttd_width_forward(Œº, V, B)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.ttd_width_residence-Tuple{Any, Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.ttd_width_residence","text":"ttd_width_residence(Œº, V, B)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.vertical_diffusion-Tuple{Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.vertical_diffusion","text":"vertical_diffusion(Fv_exchange,model_dims)\n\nSet vertical diffusive-like exchange flux Fv_exchange. Return a structure of Fluxes.\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.watermass_fraction-Tuple{Any, Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.watermass_fraction","text":"watermass_fraction(Œº, V, B; alg=:forward)\n\nForward, adjoint, and residence-time water-mass fractions.\n\nForward water-mass fraction\n\nwatermass_fraction(Œº, V, B, alg=:forward)\n\nThe water mass fractions are (equation 89 of Haine et al., 2024)\n\nbf a  = int_0^infty bf G (tau)  bf B  d tau\n\nor\n\nbf a = -bf V  mu^-1  bf V^-1  bf B  \n\nwhich is an N √ó Ns matrix with the interior boxes down the rows and the surface sources across the rows.\n\nAdjoint water-mass fraction\n\nwatermass_fraction(Œº, V, B, alg=:adjoint)\n\nFraction of water that will return to the surface in a particular box.\n\nResidence-time water-mass fraction\n\nwatermass_fraction(Œº, V, B, alg=:residence)\n\nFraction of water that leaves a particular box and returns in another box.\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.watermass_fraction_adjoint-Tuple{Any, Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.watermass_fraction_adjoint","text":"watermass_fraction_adjoint(Œº, V, B)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.watermass_fraction_forward-Tuple{Any, Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.watermass_fraction_forward","text":"watermass_fraction_forward(Œº, V, B)\n\n\n\n\n\n","category":"method"},{"location":"#OceanGreensFunctionMethods.watermass_fraction_residence-Tuple{Any, Any, Any}","page":"Home","title":"OceanGreensFunctionMethods.watermass_fraction_residence","text":"watermass_fraction_residence(Œº, V, B)\n\n\n\n\n\n","category":"method"}]
}
